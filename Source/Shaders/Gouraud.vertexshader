#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// output to Fragment Shader
out vec3 v_color;

// Uniform
// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectonTransform;


// Light and Material Uniform Variables
uniform vec3 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

void main()
{
	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectonTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	v_color = vertexColor;
	
	// Implement Gouraud shading here...		
	vec3 eye = (WorldTransform * vec4(vertexPosition_modelspace,1)).xyz;
	vec3 normal = (WorldTransform * vec4(vertexNormal_modelspace,0)).xyz;
	vec3 lightPosition_CameraSpace = (ViewTransform * vec4(WorldLightPosition,1)).xyz;
	vec3 lightVector = lightPosition_CameraSpace + eye;
	
	// Normal of the fragment in camera space
	vec3 n = normalize(normal);
	
	// Direction of the light
	vec3 l = normalize(lightColor); 

	// Cosine of the angle between the normal and the light direction clamped above 0
	float cosTheta = clamp(dot(-n,-l), 0,1);

	//diffuse
	vec3 diffuse_Color = v_color * cosTheta * lightColor;

	//ambient color
	vec3 ambientColor = v_color * materialCoefficients.x;	

	//specular
	vec3 E = normalize(eye);
	vec3 R = reflect(l,n);
	float cosAlpha = clamp(dot(E,R),0,1);	
	
	//specular, notice materialCoefficients.z is not here like in Phong.
	//vec3 specular_Color = lightColor * pow(cosAlpha, 5);

	// This should be the final color on the Vertex, including the lighting
	v_color = 
	//Ambient
	ambientColor + 
	
	//Diffuse
	v_color * cosTheta; // +
	
	//Specular
	//specular_Color;
	


	
}
