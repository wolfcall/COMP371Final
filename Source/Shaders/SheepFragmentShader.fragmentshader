#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light


// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;

// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent
uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

void main(){

	// Output color = color of the texture at the specified UV
	vec3 v_color = texture2D( myTextureSampler, UV ).rgb;

	// Implment Phong Shading based on the parameters above
	// Remember that directional light don't have attenuation
	
	// Material coefficients
	float Ka = materialCoefficients.x;
	float Kd = materialCoefficients.y;
	float Ks = materialCoefficients.z;
	float Nshiny = materialCoefficients.w;

	//light property
	float Ia=1.0f;
	float Ilight;
	if(lightVector.w == 0)
		Ilight = 1.0f;
	else
		Ilight = 45.0f;

	vec3 N = normalize(normal);
	vec3 L = normalize(lightVector.xyz);
	vec3 V = normalize(eyeVector);
	vec3 R = reflect(-L, N);

	float d = length(lightVector.xyz);
	float Fatt;
	if(lightVector.w == 0) 
		Fatt = 1.0;
	else
		Fatt = 1/(lightAttenuation.x + d*lightAttenuation.y + d*d*lightAttenuation.z);

	color = Ia*Ka*v_color + Fatt*Ilight*Kd*( clamp(dot(N,L), 0, 1) )*lightColor*v_color + Fatt*Ilight*Ks* pow(( clamp(dot(R,V), 0, 1) ), Nshiny) *lightColor;

}